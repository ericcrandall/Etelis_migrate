[
  {
    "objectID": "Etelis_migrate.html",
    "href": "Etelis_migrate.html",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "",
    "text": "Here I’m just loading a bunch of R packages that we’ll need.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ape)\nlibrary(phangorn)\nlibrary(pegas)\n#library(strataG)\nlibrary(coda)\nlibrary(ggmcmc)\nlibrary(perm)\nlibrary(snpR)\nlibrary(adegenet)\nlibrary(pcadapt)\nlibrary(knitr)\n\n\n\n\n\nAnd here are some homebrewed functions that will be helpful.\n\n\nCode\n# Function library\nharvest.model.likelihoods <- function(workingDir = workingDir,\n                                      outfileName = \"outfile.txt\",\n                                      multilocus = T){\n    # this function harvests model marginal likelihoods for models calculated by\n    # the program migrate-n (Beerli & Felsenstein 2001).\n    # It takes as input a directory full of directories, \n    # each of which contains output from a migrate model, and is named\n    # after that model. \n  \n    #initialize a data frame to take the values\n    modelMarglikes <- data.frame(model=character(),\n                             thermodynamic=numeric(),\n                             bezier.corrected=numeric(), \n                             harmonic=numeric()) \n    # loop through directories in the working directory, each of which is name\n    # after a different model\n  for(i in list.dirs(workingDir, full.names = F)[-1]){ #i<-\"stepping.stone\"\n      modelDir<-file.path(workingDir,i)\n      print(modelDir)\n    #scan in the outfile, separating at each newline\n      outfile<-scan(file=file.path(modelDir,outfileName),what=\"character\",sep=\"\\n\") \n    #find the line with the likelihoods on it and split on runs of spaces\n      marglikeline <- strsplit(grep(\"  All          \",outfile,value=T),\n                               \"\\\\s+\", perl = T)[[1]][3:5]\n    #  if(length(marglikeline)==0){next}\n      marglikes <- c(i,marglikeline)\n     \n      modelMarglikes <- rbind(modelMarglikes,marglikes, deparse.level = 2)\n  }\n  names(modelMarglikes) <- c(\"model\",\"thermodynamic\",\"bezier.corrected\",\"harmonic\")\n  modelMarglikes[2:4] <- sapply(modelMarglikes[2:4], as.numeric)\n  return(modelMarglikes)\n}\n\nbfcalcs<-function(df,ml=\"bezier.corrected\"){\n  # This calculates log bayes factors on data frames output by\n  # harvest.model.likelihoods(), following Johnson and Omland (2004)\n  # You may choose the likelihood flavor with\n  # ml = \"bezier.corrected\", \"thermodynamic\" or \"harmonic\"\n  #df$thermodynamic <- as.numeric(df$thermodynamic)\n  #df$bezier.corrected <- as.numeric(df$bezier.corrected)\n  #df$harmonic <- as.numeric(df$harmonic)\n  mlcol <- df[[ml]] \n    bmvalue <- mlcol[which.max(mlcol)]\n    lbf <- 2*(mlcol-bmvalue)\n    choice <- rank(-mlcol)\n    modelprob <- exp(lbf/2)/sum(exp(lbf/2))\n    dfall <- cbind(df,lbf,choice,modelprob)\n    return(dfall)\n}   \n\nmigrants.per.gen<-function(x){\n  #a function for creating Nm vectors out of m and Theta vectors.\n  #x<-x[[1]]\n  m<-names(x)[which(grepl(\"M_\",names(x)))] #names of m columns\n  #theta<-names(x)[which(grepl(\"Theta_\",names(x)))] #names of theta columns\n  for(n in m){\n    t<-paste(\"Theta\",strsplit(n,split=\"_\")[[1]][3],sep=\"_\")\n    x[,paste(\"Nm\",strsplit(n,split=\"_\")[[1]][2],strsplit(n,split=\"_\")[[1]][3],sep=\"_\")]<- x[,which(names(x)==n)]*x[,which(names(x)==t)] \n    #this hairy little statement makes a new column named \"Nm_X_Y\" and then fills it by multiplying the M_X_Y column by the Theta_Y column  \n  }\n  return(x)\n}"
  },
  {
    "objectID": "Etelis_migrate.html#clean-the-data-with-process_radtags",
    "href": "Etelis_migrate.html#clean-the-data-with-process_radtags",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Clean the data with process_radtags",
    "text": "Clean the data with process_radtags\nSame commands for carbunculus and coruscans. Paired end. Look for ecoR1 cutsites on read 1 and mspI cutsites on read 2. Remove low quality reads (based on a sliding window average). Remove reads smaller than 145 bp, and trim others to that length.\n\nprocess_radtags -p ./raw/ -o ./cleaned/ --rescue --clean --quality --paired --threads 12 --renz-1 ecoRI --renz-2 mspI  \\\n                  --truncate 145 --len-limit 145 \\\n                  --adapter-1 GATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG \\\n                  --adapter-2 AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT \\\n                  --adapter-mm 2\n\n\nE. carbunculus output\nBEGIN total_raw_read_counts  \nTotal Sequences 255732606  \nReads containing adapter sequence       1957206 0.8%  \nBarcode Not Found       0       0.0%  \nLow Quality     6558845 2.6%  \nRAD Cutsite Not Found   1678118 0.7%  \nRetained Reads  245538437       96.0%  \nEND total_raw_read_counts  \n\n\nE. coruscans output\nBEGIN total_raw_read_counts  \nTotal Sequences 272955592  \nReads containing adapter sequence       1919907 0.7%  \nBarcode Not Found       0       0.0%  \nLow Quality     8734891 3.2%  \nRAD Cutsite Not Found   1884115 0.7%  \nRetained Reads  260416679       95.4%  \nEND total_raw_read_counts"
  },
  {
    "objectID": "Etelis_migrate.html#running-the-denovo_map.pl-pipeline",
    "href": "Etelis_migrate.html#running-the-denovo_map.pl-pipeline",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Running the denovo_map.pl pipeline",
    "text": "Running the denovo_map.pl pipeline\nHmm… gotta rename the cleaned files too. All code is being run on both species.\n\nMore renaming\n\ncd cleaned\nfor f in *001.1.fq.gz\ndo\nmv $f ${f/_R[12]_001.1.fq.gz/.1.fq.gz}\ndone\n\nfor f in *001.2.fq.gz\ndo\nmv $f ${f/_R[12]_001.2.fq.gz/.2.fq.gz}\ndone\n\n#rename the \"remainder reads\" that have had their pair removed for low quality\nfor f in *001.rem.1.fq.gz; do mv $f ${f/_R[12]_001.rem.1.fq.gz/.rem.1.fq.gz}; done\nfor f in *001.rem.2.fq.gz; do mv $f ${f/_R[12]_001.rem.2.fq.gz/.rem.2.fq.gz}; done"
  },
  {
    "objectID": "Etelis_migrate.html#removing-extra-flags",
    "href": "Etelis_migrate.html#removing-extra-flags",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Removing extra flags",
    "text": "Removing extra flags\nOy - so denovo_map.pl crashed with this message:\n\nError: Failed to find any matching paired-end reads in ‘./cleaned/Etelis_S36.2.fq.gz’.\nAborted.\n\nJulian Catchen gives the solution here. Because these data were already run through process_radtags once to demultiplex them, it attached a \\1 to the labels of all primary reads and a \\2 to the labels of all paired reads. When I re-ran them in process_radtags, it attached an extra flag to each, which then confused tsv2bam. Julian provides the below code to remove the extra flags.\n\nls  -1 *.1.fq.gz | sed -E 's/\\.1\\.fq\\.gz//' | while read line; do zcat ${line}.1.fq.gz | sed -E 's/\\/1$//' > ../cleaned/${line}.1.fq; done\n\nls  -1 *.2.fq.gz | sed -E 's/\\.2\\.fq\\.gz//' | while read line; do zcat ${line}.2.fq.gz | sed -E 's/\\/2$//' > ../cleaned/${line}.2.fq; done\n\ncd ../cleaned\n\nparallel gzip ::: *"
  },
  {
    "objectID": "Etelis_migrate.html#run-denovo_map.pl",
    "href": "Etelis_migrate.html#run-denovo_map.pl",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Run denovo_map.pl",
    "text": "Run denovo_map.pl\nI’m going to use the denovo_map.pl pipeline. This command will take data from ./cleaned and the popmap provided by Anne and -m 5 reads per stack, -M 4 distance between stacks, -n 4 distance between catalog loci. Running on 8 -T threads and only keeping loci that appear in 80% of individuals in all 4 populations\n\ndenovo_map.pl --samples ./cleaned/ --popmap popmapECA.tsv --out-path ./pipeline --paired \\\n-m 5 -M 4 -n 4  -T 12 -r 80 -p 4 -X \"populations: --fasta-samples\" -X \"populations: --filter-haplotype-wise\""
  },
  {
    "objectID": "Etelis_migrate.html#populations",
    "href": "Etelis_migrate.html#populations",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Populations",
    "text": "Populations\nNow I need to re-run populations to get more statistics. Original populations output is in output1, this will be in output2.\n\nr80\nSettings for keeping loci that occur in 80 percent of indivs per population (so 4/5 of the Johnston invivs for coruscans). I’m being intentionally stringent by setting the p-value cutoff for hwe at 0.05.\n\npopulations -P ./ -O ./output2_r80 -M ../popmapECO.tsv -t 12 -p 4 -r 80 -H --hwe --fstats --p-value-cutoff 0.05 --fasta-loci --fasta-samples --vcf --genepop --structure --treemix --fasta-samples-raw \n\n\nE. carbunculus\nRemoved 98351 loci that did not pass sample/population constraints from 115429 loci.\nKept 17078 loci, composed of 5539395 sites; 17697 of those sites were filtered, 49261 variant sites remained.\nNumber of loci with PE contig: 17078.00 (100.0%);\n  Mean length of loci: 314.36bp (stderr 0.38);\nNumber of loci with SE/PE overlap: 2546.00 (14.9%);\n  Mean length of overlapping loci: 285.08bp (stderr 0.47); mean overlap: 27.61bp (stderr 0.13);\nMean genotyped sites per locus: 315.85bp (stderr 0.37).\n\nPopulation summary statistics (more detail in populations.sumstats_summary.tsv):\n  Japan: 13.333 samples per locus; pi: 0.16058; all/variant/polymorphic sites: 5394107/49261/33997; private alleles: 6596\n  MHI: 13.55 samples per locus; pi: 0.15487; all/variant/polymorphic sites: 5394107/49261/31541; private alleles: 3166\n  NWHI: 25.142 samples per locus; pi: 0.15329; all/variant/polymorphic sites: 5394107/49261/38082; private alleles: 7321\n\nNumber of variable sites found to be significantly out of Hardy-Weinberg equilibrium (<0.05):\n  Japan: 1145\n  MHI: 1103\n  NWHI: 1527\nNumber of loci found to be significantly out of Hardy-Weinberg equilibrium (<0.05):\n  Japan: 3917\n  MHI: 4185\n  NWHI: 3407\n(more detail in populations.sumstats.tsv and populations.hapstats.tsv)\n\nPopulation pair divergence statistics (more in populations.fst_summary.tsv and populations.phistats_summary.tsv):\n  Japan-MHI: mean Fst: 0.030208; mean Phi_st: 0.023147; mean Fst': 0.025616; mean Dxy: 0.0019853\n  Japan-NWHI: mean Fst: 0.02638; mean Phi_st: 0.028095; mean Fst': 0.029652; mean Dxy: 0.0019372\n  MHI-NWHI: mean Fst: 0.014407; mean Phi_st: 0.0018347; mean Fst': 0.0016037; mean Dxy: 0.0018308\n\n\nE. coruscans\nRemoved 130579 loci that did not pass sample/population constraints from 141967 loci.\nKept 11388 loci, composed of 3690405 sites; 32281 of those sites were filtered, 59470 variant sites remained.\nNumber of loci with PE contig: 11388.00 (100.0%);\n  Mean length of loci: 314.06bp (stderr 0.42);\nNumber of loci with SE/PE overlap: 1079.00 (9.5%);\n  Mean length of overlapping loci: 291.05bp (stderr 0.59); mean overlap: 24.47bp (stderr 0.12);\nMean genotyped sites per locus: 315.02bp (stderr 0.42).\n\nPopulation summary statistics (more detail in populations.sumstats_summary.tsv):\n  Johnston_Atoll: 4.1993 samples per locus; pi: 0.074411; all/variant/polymorphic sites: 3587423/59470/15449; private alleles: 5208\n  MHI: 13.68 samples per locus; pi: 0.060304; all/variant/polymorphic sites: 3587423/59470/25569; private alleles: 7241\n  NWHI: 26.37 samples per locus; pi: 0.060932; all/variant/polymorphic sites: 3587423/59470/38902; private alleles: 15366\n  Japan: 13.217 samples per locus; pi: 0.054013; all/variant/polymorphic sites: 3587423/59470/22717; private alleles: 6028\n\nNumber of variable sites found to be significantly out of Hardy-Weinberg equilibrium (<0.05):\n  Johnston_Atoll: 7\n  MHI: 1134\n  NWHI: 1648\n  Japan: 700\nNumber of loci found to be significantly out of Hardy-Weinberg equilibrium (<0.05):\n  Johnston_Atoll: 3998\n  MHI: 2984\n  NWHI: 2673\n  Japan: 3395\n(more detail in populations.sumstats.tsv and populations.hapstats.tsv)\n\nPopulation pair divergence statistics (more in populations.fst_summary.tsv and populations.phistats_summary.tsv):\n  Johnston_Atoll-MHI: mean Fst: 0.038243; mean Phi_st: 0.012337; mean Fst': 0.0011598; mean Dxy: 0.0014711\n  Johnston_Atoll-NWHI: mean Fst: 0.022267; mean Phi_st: 0.0056917; mean Fst': -0.0033667; mean Dxy: 0.0013478\n  Johnston_Atoll-Japan: mean Fst: 0.041778; mean Phi_st: 0.018924; mean Fst': 0.0048455; mean Dxy: 0.0014546\n  MHI-NWHI: mean Fst: 0.013568; mean Phi_st: 0.0027592; mean Fst': 0.0011102; mean Dxy: 0.0012735\n  MHI-Japan: mean Fst: 0.021407; mean Phi_st: 0.0058972; mean Fst': 0.0028619; mean Dxy: 0.0013316\n  NWHI-Japan: mean Fst: 0.013484; mean Phi_st: 0.002933; mean Fst': 0.0018245; mean Dxy: 0.0012352\n\n\n\nr100\nSettings for keeping loci that occur in 100 percent of indivs per population ::: {.cell}\npopulations -P ./ -O ./output3_r100 -M ../popmapECO.tsv -t 12 -p 4 -r 100 -H --hwe --fstats --p-value-cutoff 0.05 --fasta-loci --fasta-samples --vcf --genepop --structure --treemix --fasta-samples-raw \n\n# and again with single SNPs from each locus so we can test for linkage and selection\npopulations -P ./ -O ./output4_r100.SNP -M ../popmapECA.tsv -t 12 -p 3 -r 100 --hwe --fstats --p-value-cutoff 0.05  --vcf --genepop  --write-random-snp\n:::\n\nE. carbunculus\nRemoved 111882 loci that did not pass sample/population constraints from 115429 loci.\nKept 3547 loci, composed of 1134453 sites; 6916 of those sites were filtered, 6537 variant sites remained.\nNumber of loci with PE contig: 3547.00 (100.0%);\n  Mean length of loci: 309.83bp (stderr 0.69);\nNumber of loci with SE/PE overlap: 288.00 (8.1%);\n  Mean length of overlapping loci: 285.06bp (stderr 1.00); mean overlap: 24.45bp (stderr 0.24);\nMean genotyped sites per locus: 310.68bp (stderr 0.68).\n\nPopulation summary statistics (more detail in populations.sumstats_summary.tsv):\n  Japan: 14 samples per locus; pi: 0.10528; all/variant/polymorphic sites: 1101972/6537/3955; private alleles: 1170\n  MHI: 14 samples per locus; pi: 0.09766; all/variant/polymorphic sites: 1101972/6537/3434; private alleles: 511\n  NWHI: 27 samples per locus; pi: 0.097747; all/variant/polymorphic sites: 1101972/6537/4642; private alleles: 1340\n\nNumber of variable sites found to be significantly out of Hardy-Weinberg equilibrium (<0.05):\n  Japan: 101\n  MHI: 90\n  NWHI: 110\nNumber of loci found to be significantly out of Hardy-Weinberg equilibrium (<0.05):\n  Japan: 1197\n  MHI: 1358\n  NWHI: 1331\n(more detail in populations.sumstats.tsv and populations.hapstats.tsv)\n\nPopulation pair divergence statistics (more in populations.fst_summary.tsv and populations.phistats_summary.tsv):\n  Japan-MHI: mean Fst: 0.025802; mean Phi_st: 0.015567; mean Fst': 0.0094451; mean Dxy: 0.00087231\n  Japan-NWHI: mean Fst: 0.020607; mean Phi_st: 0.018272; mean Fst': 0.010517; mean Dxy: 0.00082861\n  MHI-NWHI: mean Fst: 0.012892; mean Phi_st: 0.00097809; mean Fst': 0.00022075; mean Dxy: 0.00081207\n\n\nE. coruscans\nRemoved 140925 loci that did not pass sample/population constraints from 141967 loci.\nKept 1042 loci, composed of 334846 sites; 3569 of those sites were filtered, 3654 variant sites remained.\nNumber of loci with PE contig: 1042.00 (100.0%);\n  Mean length of loci: 311.35bp (stderr 1.36);\nNumber of loci with SE/PE overlap: 117.00 (11.2%);\n  Mean length of overlapping loci: 285.68bp (stderr 1.71); mean overlap: 24.41bp (stderr 0.38);\nMean genotyped sites per locus: 312.62bp (stderr 1.33).\n\nPopulation summary statistics (more detail in populations.sumstats_summary.tsv):\n  Johnston_Atoll: 5 samples per locus; pi: 0.060494; all/variant/polymorphic sites: 325749/3654/975; private alleles: 520\n  MHI: 14 samples per locus; pi: 0.036669; all/variant/polymorphic sites: 325749/3654/1226; private alleles: 470\n  NWHI: 27 samples per locus; pi: 0.037317; all/variant/polymorphic sites: 325749/3654/2064; private alleles: 1019\n  Japan: 14 samples per locus; pi: 0.033766; all/variant/polymorphic sites: 325749/3654/1143; private alleles: 463\n\nNumber of variable sites found to be significantly out of Hardy-Weinberg equilibrium (<0.05):\n  Johnston_Atoll: 0\n  MHI: 32\n  NWHI: 45\n  Japan: 19\nNumber of loci found to be significantly out of Hardy-Weinberg equilibrium (<0.05):\n  Johnston_Atoll: 524\n  MHI: 422\n  NWHI: 405\n  Japan: 396\n(more detail in populations.sumstats.tsv and populations.hapstats.tsv)\n\nPopulation pair divergence statistics (more in populations.fst_summary.tsv and populations.phistats_summary.tsv):\n  Johnston_Atoll-MHI: mean Fst: 0.039663; mean Phi_st: 0.02039; mean Fst': 0.0012821; mean Dxy: 0.00073676\n  Johnston_Atoll-NWHI: mean Fst: 0.026268; mean Phi_st: 0.015567; mean Fst': 0.00037957; mean Dxy: 0.0006556\n  Johnston_Atoll-Japan: mean Fst: 0.041015; mean Phi_st: 0.020409; mean Fst': 0.0021605; mean Dxy: 0.0007176\n  MHI-NWHI: mean Fst: 0.012433; mean Phi_st: 0.00025697; mean Fst': 4.0397e-05; mean Dxy: 0.00049144\n  MHI-Japan: mean Fst: 0.019806; mean Phi_st: 0.0039369; mean Fst': 0.00060169; mean Dxy: 0.00050736\n  NWHI-Japan: mean Fst: 0.012751; mean Phi_st: 0.0020762; mean Fst': 0.00052502; mean Dxy: 0.00047009"
  },
  {
    "objectID": "Etelis_migrate.html#download-the-populations-output",
    "href": "Etelis_migrate.html#download-the-populations-output",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Download the populations output",
    "text": "Download the populations output\n\nscp -r argo:./Etelis/coruscans/pipeline/output3_r100 ./populations_r100\nscp -r argo:./Etelis/carbunculus/pipeline/output3_r100 ./populations_r100"
  },
  {
    "objectID": "Etelis_migrate.html#adegenet",
    "href": "Etelis_migrate.html#adegenet",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Adegenet",
    "text": "Adegenet\n\necor_haps <- read.genepop(\"coruscans/populations_r100/populations.haps.gen\")\n\n\n Converting data from a Genepop .gen file to a genind object... \n\n\nFile description:  Stacks v2.61; GenePop v4.1.3; September 30, 2022 \n\n...done.\n\nlevels(ecor_haps$pop) <- c(\"JA\",\"MHI\",\"NWHI\",\"JP\")\n\necor_dapc <- dapc(ecor_haps,pop =  ecor_haps$pop, scale = T, pca.select=\"nbEig\", n.pca = 50, n.da=3)\n\nWarning in .local(x, ...): Some scaling values are null.\n Corresponding alleles are removed.\n\nscatter(ecor_dapc)\n\n\n\necor_hwe <- hw.test(ecor_haps, B = 1000)\n\nLet’s take a look with the randomly selected SNPs\n\necor_snps.genind <- read.genepop(\"coruscans/populations_r100/populations.randsnp.gen\")\n\n\n Converting data from a Genepop .gen file to a genind object... \n\n\nFile description:  # Stacks v2.61; GenePop v4.1.3; September 30, 2022 \n\n...done.\n\nlevels(ecor_snps.genind$pop) <- c(\"JA\",\"MHI\",\"NWHI\",\"OK\")\n\necor_dapc_snps <- dapc(ecor_snps.genind,pop =  ecor_snps.genind$pop, scale = T,\n                       pca.select=\"nbEig\", n.pca = 50, n.da=3)\n\nWarning in .local(x, ...): Some scaling values are null.\n Corresponding alleles are removed.\n\nscatter(ecor_dapc_snps)"
  },
  {
    "objectID": "Etelis_migrate.html#snpr",
    "href": "Etelis_migrate.html#snpr",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "SNPr",
    "text": "SNPr\nI will use Will Hemstrom’s new package SNPr to further evaluate and filter the SNPs that I randomly selected from each locus.\n\npopmap <- read_tsv(\"coruscans/popmapECO.tsv\",col_names = c(\"sampID\",\"pop\"))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  sampID = col_character(),\n  pop = col_character()\n)\n\necor_snps <- read_vcf(file = \"coruscans/populations_r100/populations.randsnp.vcf\",\n                      sample.meta = popmap)\n\nScanning file to determine attributes.\nFile attributes:\n  meta lines: 14\n  header_line: 15\n  variant count: 929\n  column count: 69\n\nMeta line 14 read in.\nAll meta lines processed.\ngt matrix initialized.\nCharacter matrix gt created.\n  Character matrix gt rows: 929\n  Character matrix gt cols: 69\n  skip: 0\n  nrows: 929\n  row_num: 0\n\nProcessed variant: 929\nAll variants processed\n\n\n\nFiltering\nI’ve already implemented stringent filters in Stacks to only include individuals with all loci and loci found in all individuals. Now going to implement a strict HWE filter - if a locus is out of HWE in any population (hwe_facets = \"pop\") after a Bonferroni correction, then it will be removed. Also going to remove non-variant loci, and loci with only a single minor allele (“singletons”).\n\necor_snps <- filter_snps(ecor_snps, min_ind = 0.9999, min_loci = 0.9999, re_run = \"full\", \n                         hwe = 0.05, fwe_method = \"BY\", hwe_facets = \"pop\", singletons = T,\n                         verbose = T)\n\nInitializing...\nFiltering loci. Starting loci: 929 \nFiltering non-biallelic loci...\n    0 bad loci\nFiltering non_polymorphic loci...\n    0 bad loci\nFiltering loci sequenced in few individuals...\n    0 bad loci\nFiltering singletons.\n    521 bad loci\nFiltering loci out of hwe...\n     7  bad loci\n    Ending loci: 401 \nFiltering individuals. Starting individuals: 60 \nFiltering out individuals sequenced in few kept loci...\nNo individuals removed.\n\n\n\n\nIndividual Stats\nsnpR uses facets to subset data on either sample metadata (such as sample ID, or population) or SNP metadata. Here we will look at per-individual stats. Also, note that the calculations are just attached to the data object, so we don’t lose track of them. Nice.\n\necor_snps <- calc_hs(ecor_snps, facets = \"sampID\")\necor_snps <- calc_he(ecor_snps, facets = \"sampID\")\necor_snps <- calc_ho(ecor_snps, facets = \"sampID\")\n\n# and dang, just like that we can get a PCA\np <- plot_clusters(ecor_snps, facets = \"pop\")\n\nFormatting data...\n\np$plots$pca\n\n\n\n\nso there’s that one weirdo at Johnston, who is A150… we can identify him like this. He has double the mean \\(H_e\\) and \\(H_o\\).\n\necor_snps <- calc_genetic_distances(ecor_snps, facets = \"sampID\",method = \"Nei\")\nstats.ind <- get.snpR.stats(ecor_snps, facets=\"sampID\", stats = c(\"hs\",\"ho\",\"he\"))\nind.dists <- get.snpR.stats(ecor_snps,facets=\"sampID\", stats = \"genetic_distance\")                  \nheatmap(as.matrix(ind.dists$sampID$.base$Nei))\n\n\n\n# drop'im\necor_snps <- ecor_snps[,-which(\"Etelis_A150\" %in% names(ecor_snps))]\n\np2 <- plot_clusters(ecor_snps, facets = \"pop\")\n\nFormatting data...\n\np2$plots$pca\n\n\n\n\n\n\nPopulation Stats\nAnd here are some summary stats about each population\n\necor_snps <- calc_ho(ecor_snps, facets = \"pop\")\necor_snps <- calc_he(ecor_snps, facets = \"pop\")\necor_snps <- calc_maf(ecor_snps, facets = \"pop\")\necor_snps <- calc_pi(ecor_snps, facets = \"pop\")\necor_snps <- calc_private(ecor_snps, facets = \"pop\")\necor_snps <- calc_hwe(ecor_snps, facets = \"pop\")\necor_snps <- calc_fis(ecor_snps, facets = \"pop\")\necor_snps <- calc_pairwise_fst(ecor_snps, facets = \"pop\")\n\nstats <- get.snpR.stats(ecor_snps, facets = \"pop\", stats = c(\"maf\", \"ho\",\"he\",\"hwe\", \"fis\",\"pi\", \"private\"))\nstats$weighted.means\n\n\n\n  \n\n\n# and here is Fst\n\necor_fst <- get.snpR.stats(ecor_snps, facets = \"pop\", stats = c(\"fst\"))\necor_fst$fst.matrix\n\n$pop\n               p1 Johnston_Atoll           MHI         NWHI\n1:          Japan     0.01160639  0.0071644684  0.000928317\n2: Johnston_Atoll             NA -0.0004782547 -0.014014024\n3:            MHI             NA            NA  0.001275046\n\n\n\n\nLinkage Disequilibrium\nA little stuck on LD. But there are so few markers (intentionally) that it really shouldn’t be an issue.\n\necor_snps <- calc_pairwise_ld(ecor_snps, facets =\"CHROM\", verbose = T)\nldstats <- get.snpR.stats(ecor_snps, stats = \"ld\", facets = \"CHROM\")\nld <- plot_pairwise_ld_heatmap(ecor_snps, facets=c(\"CHROM\"))"
  },
  {
    "objectID": "Etelis_migrate.html#remove-loci-under-selection-using-pcadapt",
    "href": "Etelis_migrate.html#remove-loci-under-selection-using-pcadapt",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Remove loci under selection using pcadapt",
    "text": "Remove loci under selection using pcadapt\nFollowing along [here](https://bcm-uga.github.io/pcadapt/articles/pcadapt.html.\nFirst, write out the data into plink format\n\nformat_snps(ecor_snps, output = \"plink\", facets = \"pop\", \n            outfile = \"coruscans/plink/coruscans.plink\",chr = \"CHROM\", \n            position = \"position\" )\n\n\nScree Plot\n\necor_plink <- read.pcadapt(\"coruscans/plink/coruscans.plink.bed\",type=\"bed\")\n\npca20 <- pcadapt(ecor_plink, K = 20)\n\nplot(pca20, option = \"screeplot\")\n\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n\n\n\n\n\nBased on the scree plot I think we’ll use 5 PCs.\n\n\nPCA\n\npca5 <- pcadapt(ecor_plink, K = 5)\nplot(pca5, option = \"scores\", pop = popmap$pop[-1])\n\nWarning: Use of `df$Pop` is discouraged. Use `Pop` instead.\n\n\n\n\n\n\nplot(pca5, option = \"manhattan\")\n\n\n\n#qqplot\nplot(pca5, option = \"qqplot\")\n\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n\n\n\n\n#histogram\nhist(pca5$pvalues, xlab = \"p-values\", main = NULL, breaks = 50, col = \"orange\")\n\n\n\n\n\n\nOutliers\nJust because there is a little cluster of length(pca5_outliers) in the qqplot and histogram, I’m going to mark them as outliers and remove them.\n\npadj <- p.adjust(pca5$pvalues, method = \"none\")\nalpha <- 0.125\npca5_outliers <- which(padj < alpha)\n\n#remove outliers\necor_snps2 <- ecor_snps[-pca5_outliers,]\n\n\n\nWrite out filtered SNPs and haplotypes\n\n#write to vcf\nformat_snps(ecor_snps2, output = \"vcf\", facets = \"pop\", \n            outfile = \"coruscans/hwe.pcadapt.filtered.snps.vcf\",chr = \"CHROM\", \n            position = \"position\" )\n\nwrite.csv(pca5_outliers, \"coruscans/pcadapt.outliers.csv\")\n#grab the locus names and write them to a whitelist to be included in the migrate data file.\nwhitelist <- ecor_snps2@snp.meta$CHROM\nwrite.table(sort(as.numeric(ecor_snps2@snp.meta$CHROM)), \"coruscans/ecor_whitelist.txt\", quote=F, row.names = F,col.names =F )\n\necor_haps2 <- ecor_haps[,loc = locNames(ecor_haps) %in% whitelist]\n# write them out\ngenind_to_genepop(ecor_haps2,output = \"coruscans/hwe.pcadapt.filtered.haps.txt\")"
  },
  {
    "objectID": "Etelis_migrate.html#fasta2genotype",
    "href": "Etelis_migrate.html#fasta2genotype",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Fasta2Genotype",
    "text": "Fasta2Genotype\nPaul Maier created this script to convert Stacks haplotypes to migrate format.\n\nInstall Python2\nI had a doozy of a time trying to get this to work this time around: the script was written in python2. which is nearly deprecated. I first tried to use 2to3 to upgrade the script to python3, but there were a few stray tabs I couldn’t figure out. I eventually landed here, and used the following commands to install pyenv, which can handle multiple python installs.\n\nbrew install pyenv\npyenv install 2.7.18\npyenv versions\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc\\necho 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc\\necho 'eval \"$(pyenv init -)\"' >> ~/.zshrc\nexec \"$SHELL\"\npyenv shell 2.7.18 # use python 2 for this shell session\n\n pip install numpy\n pip install --upgrade pip # need to update pip to be able to install scipy\n pip install scipy\n\n\n\nRun it\nI had to remove all the [individualName] tokens from the populations.samples.fa to get it to work. Also, I added a SampleID column and header row to the popmap for use by fasta2genotype.py. Finally, I created a whitelist by editing the vcf file output above of the fully cleaned set of SNPs.\n\npython ../../fasta2genotype/fasta2genotype.py populations_r100/populations.samples2.fa ecor_whitelist.txt \\\npopmapECO_f2g.tsv NA Ecoruscans2.mig\n\n\n###################################################################\n###                                                             ###\n###       Fasta2Genotype | Data Conversion | Version 1.10       ###\n###                                                             ###\n###                        Cite as follows:                     ###\n###                                                             ###\n###   Maier P.A., Vandergast A.G., Ostoja S.M., Aguilar A.,     ###\n###   Bohonak A.J. (2019). Pleistocene glacial cycles drove     ###\n###   lineage diversification and fusion in the Yosemite toad   ###\n###   (Anaxyrus canorus). Evolution, in press.                  ###\n###   https://www.doi.org/10.1111/evo.13868                     ###\n###                                                             ###\n###################################################################\n\nOutput type? [1] Migrate [2] Arlequin [3] DIYABC [4] LFMM [5] Phylip [6] G-Phocs [7] Treemix [8] Haplotype: 1\nLoci to use? [1] Whitelist [2] All: 1\nRemove restriction enzyme or adapter sequences? These may bias data. [1] Yes [2] No: 2\nCoverage Cutoff (number reads for locus)? Use '0' to ignore coverage: 0\nRemove monomorphic loci? [1] Yes [2] No: 1\nRemove loci with excess heterozygosity? This can remove paralogs. [1] Yes [2] No: 1\nMaximum heterozygosity cutoff for removing loci out of Hardy-Weinberg? 0.5\nFilter for allele frequency? False alleles might bias data. [1] Yes [2] No: 2\nFilter for missing genotypes? These might bias data. [1] Yes [2] No: 2\n \n**************************************************************************************************************\n***                                       ... BEGINNING CONVERSION ...                                     ***\n**************************************************************************************************************\n \nCataloging loci...\nCounting locus lengths...\nCataloging populations...\nCounting gene copies...\nCounting alleles for each locus...\nIdentifying loci with excess heterozygosity...\n     Calculating observed heterozygosity and homozygosity...\n     Calculating expected heterozygosity and homozygosity...\n     Flagging loci with excess heterozygosity for removal...\n     Removing loci...\nOutputting migrate-n file...\n*** DONE! ***\n\nI then re-ran the script, selecting phylip output, with locus name headers, and all other options the same. I need the locus names in the order output by the script in order to run modeltest."
  },
  {
    "objectID": "Etelis_migrate.html#mutation-models",
    "href": "Etelis_migrate.html#mutation-models",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Mutation Models",
    "text": "Mutation Models\nI need to figure out an overall mutation model to use with RAD loci. I received this advice one from Peter about how to construct these. I’ll use modelTest in the phangorn package to see where that gets me.\nI renamed the FASTA headers in populations.samples.fa with BBEdit to create population.samples3.fa\n\nFind: >CLocus_\\d+_Sample_\\d+_Locus_(\\d+)_Allele_([01]) \\[Etelis_(.+)\\]\nReplace: >\\3_L\\1_A\\2\n\n#first token is sample name, second is locus number(name) third is allele\n\n#Also remove bad indiv A150\nFind: >A150_.+\\n.+\\n\nReplace:\n\nLets load in the data and calculate some statistics for each locus. Previously Migrate-n only implemented the F84 (=HKY) model, with two rates (Transitions and Transversions) and gamma distributed rate variability.\nNow it will take these possible models: 1 Jukes-Cantor model 2 Kimura 2-parameter model 3 Felsenstein 1981 (F81) model 4 Felsenstein 1984 (F84) model 5 Hasegawa-Kishino-Yano model 6 Tamura-Nei model\n\nfastadata <- read.FASTA(\"coruscans/populations_r100/populations.samples3.fa\")\n\n#  read in the locus lengths, as optional additional way to make sure the stats\n# and the migrate infile are ordered the same\n#migrate_lengths <- read_lines(\"coruscans/Ecoruscans.mig\", skip = 1, n_max=1) %>% \n#  str_split(\"\\\\t\", simplify = T) %>%  t(.) %>% tibble(length=.) %>% na.omit()\n\nmigrate_loci <- read_lines(\"coruscans/Ecoruscans.phy\", skip = 1, n_max=1) %>% \n  str_split(\"\\\\t\", simplify = T) %>%  t(.) %>% tibble(locus_name=.) %>% filter(locus_name!=\"\")\n\nstats <- tibble(locus = character(), \n                length = numeric(),\n                segSites = numeric(),\n                nHaps = numeric(),\n                nucDiv = numeric(),\n                ttRatio = numeric(),\n                model = character(),\n                gammaShape = numeric(),\n                rate1 = numeric(), \n                rate2 = numeric(), \n                rate3 = numeric(),\n                rate4 = numeric(),\n                Q1= numeric(),\n                Q2 = numeric(),\n                Q3 = numeric(),\n                )\n                \nfor(l in migrate_loci$locus_name){\n  L <- paste0(\"L\",l,\"_\")\n  print(paste(\"Now Doing Locus\", l, match(l,  migrate_loci$locus_name), \"out of\", length(migrate_loci$locus_name)))\n  locus_dnabin <- fastadata[str_which(names(fastadata),pattern = L)]\n  # convert to package formats\n  locus_dnabin <- as.matrix(locus_dnabin)\n  locus_gtypes <- sequence2gtypes(locus_dnabin)\n  locus_phy <- phyDat(locus_dnabin)\n  #create a haplotype network .. to be continued\n  haps <- haplotype(locus_dnabin)\n  nhaps <- length(dimnames(haps)[[1]])\n  #tcs <- haploNet(haps)\n  #find parameters of HKY (F84) model\n  modeltest <- modelTest(locus_phy, model = c(\"JC\",\"K80\", \"F81\", \"HKY\",\"TrN\"), \n                         G = T, I = F, k = 4, mc.cores = 5)\n  # pick out the best model. If multiple models are tied for best, pick the simplest one\n  bestmodel <- modeltest$Model[which(modeltest$BIC == min(modeltest$BIC))][1]\n  #open the object environment\n  env <- attr(modeltest,\"env\")\n  bestparams <- get(bestmodel, env)\n  bestparams <- eval(bestparams, env=env)\n  # use this code for v3, which only has F84 (HKY)\n  #HKY <- modelTest(locus_phy, model = c(\"HKY\"), \n  #                       G = T, I = F, k = 4)\n  #env <- attr(HKY, \"env\")\n  #HKYG <- get(\"HKY+G\", env)\n  #model <- eval(HKYG, env=env)\n  # calculate TiTv Ratio\n  ttratio <- TiTvRatio(locus_gtypes)\n  \n  stats <- bind_rows(stats, tibble(locus=L, \n                          length = length(locus_dnabin[1,]),\n                          segSites = length(seg.sites(locus_dnabin)),\n                          nHaps = length(dimnames(haps)[[1]]),\n                          nucDiv = nuc.div(locus_dnabin),\n                          ttRatio =  ttratio[3],\n                          model = bestmodel,\n                          gammaShape = bestparams$shape,\n                          rate1 = bestparams$g[1],\n                          rate2 = bestparams$g[2],\n                          rate3 = bestparams$g[3],\n                          rate4 = bestparams$g[4],\n                          Q1 = sort(unique(bestparams$Q))[1],\n                          Q2 = sort(unique(bestparams$Q))[2],\n                          Q3 = sort(unique(bestparams$Q))[3]\n                          ))\n                         \n                        \n}\n\n#stats <- stats[which(stats$length %in% migrate_lengths$length),]\n#setdiff(stats$length, as.numeric(migrate_lengths$length))\n# write_csv(stats, \"coruscans/migrate_locus_statistics.csv\")\n\n\nWrite a model block\nWrite a space delimited textfile that can be added to the migrate data file in the format that Peter suggested.\n\nstats <- read_csv(\"./coruscans/migrate_locus_statistics.csv\")\nkable(stats)\n\n\n# write a space delimited textfile that can be added to the migrate data file\n# following Peter's suggestion here:\n#https://groups.google.com/g/migrate-support/c/XjV_4jZW4RI/m/HbRWoGY6AwAJ\nmigrate_mutation_models <- tibble(prefix = \"#$\",\n                                 locus=1:length(stats$locus),\n                                 type = \"s\",\n                                 model = stats$model,\n                                 q1 = stats$Q2,\n                                 q2 = stats$Q3)\n\n#write_delim(migrate_mutation_models,\"./coruscans/migrate_modelblock.txt\", na=\"\", delim = \" \")\n\nRead them back in so we don’t have to recalculate them every time I knit.\nSo we have a 0 invariant loci, and the mean overall transition:transversion ratio is NaN. Mean gamma shape parameter is NA, which argues for only one rate."
  },
  {
    "objectID": "Etelis_migrate.html#parmfile",
    "href": "Etelis_migrate.html#parmfile",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Parmfile",
    "text": "Parmfile\nHere’s the parmfile I am using, based on my parmfile for Palythoa tuberculosa. This one depicts a model of divergence without gene flow.\n\n################################################################################\n# Parmfile for Migrate 4.4.4(git:v4-series-26-ge85c6ff)-June-1-2019 [do not remove these first TWO lines]\n# generated automatically on\n# Fri Feb 4 2022\nmenu=NO\nnmlength=10\ndatatype=SequenceData\ndatamodel=HKY\nttratio=1.000000\n\nfreqs-from-data=YES \n\nseqerror-rate={0.0001,0.0001,0.0001,0.0001}\ncategories=1 #no categories file specified\nrates=1: 1.000000 \nprob-rates=1: 1.000000 \nautocorrelation=NO\nweights=NO\nrecover=NO\nfast-likelihood=NO\ninheritance-scalars={1.00000000000000000000}\nhaplotyping=YES:no-report\npopulation-relabel={1 2 3 4}\ninfile=../../Ecoruscans2.mig\nrandom-seed=AUTO #OWN:410568459\ntitle= Etelis coruscans\nprogress=YES\nlogfile=YES:logfile.txt\nprint-data=NO\noutfile=outfile.txt\npdf-outfile=outfile.pdf\npdf-terse=YES\nuse-M=YES\nprint-tree=NONE\nmig-histogram=MIGRATIONEVENTSONLY\nskyline=NO #needs mig-histogram=ALL:...\ntheta=PRIOR:50\nmigration=PRIOR:10\nrate=PRIOR:50\nsplit=PRIOR:10\nsplitstd=PRIOR:10\nmutation=CONSTANT\nanalyze-loci=A\ndivergence-distrib=E\ncustom-migration={\n*   0   0   0\nd   *   0   0\n0   d   *   0\n0 0 d *\n}\ngeo=NO\n\nupdatefreq=0.200000 0.200000 0.200000 0.200000 #tree, parameter haplotype, timeparam updates\nbayes-posteriorbins= 2000 2000\nbayes-posteriormaxtype=TOTAL\nbayes-file=YES:bayesfile\nbayes-allfile=YES:bayesallfile\nbayes-all-posteriors=YES:bayesallposterior\nbayes-proposals= THETA METROPOLIS-HASTINGS Sampler\nbayes-proposals= MIG SLICE Sampler\nbayes-proposals= DIVERGENCE METROPOLIS-HASTINGS Sampler\nbayes-proposals= DIVERGENCESTD METROPOLIS-HASTINGS Sampler\nbayes-priors= THETA WEXPPRIOR: 0.0 0.001 0.1000000 0.01000 \nbayes-priors= MIG WEXPPRIOR: 0.000100 1000.000000 10000 100\nbayes-priors= SPLIT * *  WEXPPRIOR: 0.0 0.001 0.1000000 0.01000\nbayes-priors= SPLITSTD * *  WEXPPRIOR: 0.0 0.001 0.1000000 0.01000\nbayes-hyperpriors=NO\nlong-chains=1\nlong-inc=100\nlong-sample=10000\nburn-in=2000  \nauto-tune=YES:0.440000\nassign=NO\nheating=YES:1:{1.000000,1.500000,3.000000,1000000.000000}\nheated-swap=YES\nmoving-steps=NO\ngelman-convergence=No\nreplicate=YES:3\nend\n\n\nCopy It Up\nCopy it up, and then make a total of 10 replicate copies of the folder.\n\nscp -r ./migrate eric@moneta.tobolab.org:./Etelis/coruscans/migrate/rep1\n\n#once on server, copy it 9 times\nfor a in $(seq 2 10); do cp -r rep1 rep$a; done"
  },
  {
    "objectID": "Etelis_migrate.html#metapopulation-models",
    "href": "Etelis_migrate.html#metapopulation-models",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Metapopulation Models",
    "text": "Metapopulation Models\nTo be added."
  },
  {
    "objectID": "Etelis_migrate.html#bash-script",
    "href": "Etelis_migrate.html#bash-script",
    "title": "Gene Flow Models for Etelis spp. Deepwater Snappers",
    "section": "Bash Script",
    "text": "Bash Script\nSo we will do 10 replicates of 3 replicates. This will start at r1, and run all models for that before moving on. Pretty sure this will finish one whole model before moving on to the next one (since all threads are being used for different loci)\n\n### Bash Script\n#!\nfor r in */\n    do\n        cd $r\n        echo $r\n        date\n        date > date.txt\n            for m in */\n              do\n                cd $m\n                  date > date.txt\n                  echo $m\n                  date\n                  mpirun -np 32 ~/migrate-5.0.4/src/migrate-n-mpi parmfile\n                  sleep 1\n                cd ..\n              done\n        cd ..\n    done"
  }
]